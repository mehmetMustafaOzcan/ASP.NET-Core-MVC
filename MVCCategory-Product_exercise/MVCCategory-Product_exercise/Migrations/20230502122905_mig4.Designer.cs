// <auto-generated />
using MVCCategory_Product_exercise.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCCategory_Product_exercise.Migrations
{
    [DbContext(typeof(CompanyContext))]
    [Migration("20230502122905_mig4")]
    partial class mig4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVCCategory_Product_exercise.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "New tech phones",
                            Name = "Phone"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Wonderful computers",
                            Name = "Computer"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "TV's",
                            Name = "Television"
                        });
                });

            modelBuilder.Entity("MVCCategory_Product_exercise.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Instock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Instock = true,
                            Name = "iPhone 13",
                            Price = 9999m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Instock = true,
                            Name = "Samsung Galaxy S21",
                            Price = 7999m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Instock = true,
                            Name = "Xiaomi Mi 11 Lite",
                            Price = 3499m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Instock = true,
                            Name = "Macbook Pro",
                            Price = 16999m
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Instock = true,
                            Name = "HP Pavilion",
                            Price = 7499m
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Instock = true,
                            Name = "Asus ROG",
                            Price = 13999m
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            Instock = true,
                            Name = "Samsung 55'' 4K Smart TV",
                            Price = 6999m
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3,
                            Instock = true,
                            Name = "LG 65'' OLED TV",
                            Price = 13999m
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3,
                            Instock = true,
                            Name = "Sony 75'' 4K HDR TV",
                            Price = 21999m
                        });
                });

            modelBuilder.Entity("MVCCategory_Product_exercise.Models.Product", b =>
                {
                    b.HasOne("MVCCategory_Product_exercise.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MVCCategory_Product_exercise.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
